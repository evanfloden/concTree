/** @file semphy_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef SEMPHY_CMDLINE_H
#define SEMPHY_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "semphy"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "semphy"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0.b1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int SEMPHY_flag;	/**< @brief Do SEMPHY step (default=off).  */
  const char *SEMPHY_help; /**< @brief Do SEMPHY step help description.  */
  int bbl_flag;	/**< @brief Only optimize branch length (default=off).  */
  const char *bbl_help; /**< @brief Only optimize branch length help description.  */
  int likelihood_flag;	/**< @brief Compute likelihood for fixed tree (default=off).  */
  const char *likelihood_help; /**< @brief Compute likelihood for fixed tree help description.  */
  int PerPosLike_flag;	/**< @brief Compute likelihood per position for a fixed tree (default=off).  */
  const char *PerPosLike_help; /**< @brief Compute likelihood per position for a fixed tree help description.  */
  int PerPosPosterior_flag;	/**< @brief Compute likelihood per position and Bayesian posterior (default=off).  */
  const char *PerPosPosterior_help; /**< @brief Compute likelihood per position and Bayesian posterior help description.  */
  int rate_flag;	/**< @brief optimize rate of gene (default=off).  */
  const char *rate_help; /**< @brief optimize rate of gene help description.  */
  int max_semphy_iter_arg;	/**< @brief Max number of SEM iterations (default='100').  */
  char * max_semphy_iter_orig;	/**< @brief Max number of SEM iterations original value given at command line.  */
  const char *max_semphy_iter_help; /**< @brief Max number of SEM iterations help description.  */
  float epsilonLikelihoodImprovement4iterNJ_arg;	/**< @brief The threshold for optimization of likelihood of the tree, in iterative distance-based tree reconstruction (default='0.01').  */
  char * epsilonLikelihoodImprovement4iterNJ_orig;	/**< @brief The threshold for optimization of likelihood of the tree, in iterative distance-based tree reconstruction original value given at command line.  */
  const char *epsilonLikelihoodImprovement4iterNJ_help; /**< @brief The threshold for optimization of likelihood of the tree, in iterative distance-based tree reconstruction help description.  */
  float epsilonLikelihoodImprovement4pairwiseDistance_arg;	/**< @brief The threshold for optimization of likelihood of a pair of sequences, in pairwise distance optimization (default='0.0001').  */
  char * epsilonLikelihoodImprovement4pairwiseDistance_orig;	/**< @brief The threshold for optimization of likelihood of a pair of sequences, in pairwise distance optimization original value given at command line.  */
  const char *epsilonLikelihoodImprovement4pairwiseDistance_help; /**< @brief The threshold for optimization of likelihood of a pair of sequences, in pairwise distance optimization help description.  */
  float epsilonLikelihoodImprovement4alphaOptimiz_arg;	/**< @brief The threshold for optimization of likelihood of the tree, in alpha optimization (also used for Nu optimization when using --ssrv) (default='0.01').  */
  char * epsilonLikelihoodImprovement4alphaOptimiz_orig;	/**< @brief The threshold for optimization of likelihood of the tree, in alpha optimization (also used for Nu optimization when using --ssrv) original value given at command line.  */
  const char *epsilonLikelihoodImprovement4alphaOptimiz_help; /**< @brief The threshold for optimization of likelihood of the tree, in alpha optimization (also used for Nu optimization when using --ssrv) help description.  */
  float epsilonLikelihoodImprovement4BBL_arg;	/**< @brief The threshold for optimization of likelihood of the tree, in branch-lengths optimization (default='0.01').  */
  char * epsilonLikelihoodImprovement4BBL_orig;	/**< @brief The threshold for optimization of likelihood of the tree, in branch-lengths optimization original value given at command line.  */
  const char *epsilonLikelihoodImprovement4BBL_help; /**< @brief The threshold for optimization of likelihood of the tree, in branch-lengths optimization help description.  */
  int maxNumOfBBLIter_arg;	/**< @brief Number of BBL iterations in BBL+ALPHA optimization (default='10').  */
  char * maxNumOfBBLIter_orig;	/**< @brief Number of BBL iterations in BBL+ALPHA optimization original value given at command line.  */
  const char *maxNumOfBBLIter_help; /**< @brief Number of BBL iterations in BBL+ALPHA optimization help description.  */
  int consurf_flag;	/**< @brief version for use in consurf (default=off).  */
  const char *consurf_help; /**< @brief version for use in consurf help description.  */
  const char *NJ_help; /**< @brief 'classic' Neighbor Joining (same as homogeneousRates) help description.  */
  const char *homogeneousRatesDTME_help; /**< @brief homogeneous rates MLE distance help description.  */
  const char *pairwiseGammaDTME_help; /**< @brief Gamma-ASRV with alpha optimized for each pair. (must give either --alpha or --optimizeAlpha) help description.  */
  const char *commonAlphaDTME_help; /**< @brief Side information is the alpha parameter.(must use --optimizeAlpha; may give an initial alpha value in --alpha) help description.  */
  const char *rate4siteDTME_help; /**< @brief Side information is the ML rate for each site help description.  */
  const char *posteriorDTME_help; /**< @brief Side information is the posterior probabilities of the rates at each site. (must use --optimizeAlpha; may give an initial alpha value in --alpha) help description.  */
  int BPrepeats_arg;	/**< @brief Use bootstrap and set number of repeats.  */
  char * BPrepeats_orig;	/**< @brief Use bootstrap and set number of repeats original value given at command line.  */
  const char *BPrepeats_help; /**< @brief Use bootstrap and set number of repeats help description.  */
  int BPconsensus_arg;	/**< @brief Use bootstrap and compute a Consensus tree.  */
  char * BPconsensus_orig;	/**< @brief Use bootstrap and compute a Consensus tree original value given at command line.  */
  const char *BPconsensus_help; /**< @brief Use bootstrap and compute a Consensus tree help description.  */
  int BPonUserTree_flag;	/**< @brief Use compute support for user provided tree (default=off).  */
  const char *BPonUserTree_help; /**< @brief Use compute support for user provided tree help description.  */
  char * sequence_arg;	/**< @brief Sequence file name (default='-').  */
  char * sequence_orig;	/**< @brief Sequence file name original value given at command line.  */
  const char *sequence_help; /**< @brief Sequence file name help description.  */
  char * tree_arg;	/**< @brief Tree file name.  */
  char * tree_orig;	/**< @brief Tree file name original value given at command line.  */
  const char *tree_help; /**< @brief Tree file name help description.  */
  char * constraint_arg;	/**< @brief Constraint Tree file name.  */
  char * constraint_orig;	/**< @brief Constraint Tree file name original value given at command line.  */
  const char *constraint_help; /**< @brief Constraint Tree file name help description.  */
  char * outputfile_arg;	/**< @brief Output file (default='-').  */
  char * outputfile_orig;	/**< @brief Output file original value given at command line.  */
  const char *outputfile_help; /**< @brief Output file help description.  */
  char * treeoutputfile_arg;	/**< @brief Tree output file (default='-').  */
  char * treeoutputfile_orig;	/**< @brief Tree output file original value given at command line.  */
  const char *treeoutputfile_help; /**< @brief Tree output file help description.  */
  int gaps_flag;	/**< @brief Remove positions with gaps (default=off).  */
  const char *gaps_help; /**< @brief Remove positions with gaps help description.  */
  long seed_arg;	/**< @brief Seed random number generator.  */
  char * seed_orig;	/**< @brief Seed random number generator original value given at command line.  */
  const char *seed_help; /**< @brief Seed random number generator help description.  */
  int alphabet_arg;	/**< @brief Alphabet Size (default='20').  */
  char * alphabet_orig;	/**< @brief Alphabet Size original value given at command line.  */
  const char *alphabet_help; /**< @brief Alphabet Size help description.  */
  float ratio_arg;	/**< @brief Transition/Transversion ratio (default='2.0').  */
  char * ratio_orig;	/**< @brief Transition/Transversion ratio original value given at command line.  */
  const char *ratio_help; /**< @brief Transition/Transversion ratio help description.  */
  char * ACGprob_arg;	/**< @brief User input nucleotide frequencies. String separated list for A,C,G (default='0.25,0.25,0.25').  */
  char * ACGprob_orig;	/**< @brief User input nucleotide frequencies. String separated list for A,C,G original value given at command line.  */
  const char *ACGprob_help; /**< @brief User input nucleotide frequencies. String separated list for A,C,G help description.  */
  float inputRate_arg;	/**< @brief Set External globalRate (default='1.0').  */
  char * inputRate_orig;	/**< @brief Set External globalRate original value given at command line.  */
  const char *inputRate_help; /**< @brief Set External globalRate help description.  */
  int homogeneous_flag;	/**< @brief Don't use Gamma ASRV (default=off).  */
  const char *homogeneous_help; /**< @brief Don't use Gamma ASRV help description.  */
  float alpha_arg;	/**< @brief Set alpha for Gamma ASRV.  */
  char * alpha_orig;	/**< @brief Set alpha for Gamma ASRV original value given at command line.  */
  const char *alpha_help; /**< @brief Set alpha for Gamma ASRV help description.  */
  int optimizeAlpha_flag;	/**< @brief Optimize alpha for Gamma ASRV (default=off).  */
  const char *optimizeAlpha_help; /**< @brief Optimize alpha for Gamma ASRV help description.  */
  int categories_arg;	/**< @brief Number of categories to use with descrete Gamma ASRV (default='8').  */
  char * categories_orig;	/**< @brief Number of categories to use with descrete Gamma ASRV original value given at command line.  */
  const char *categories_help; /**< @brief Number of categories to use with descrete Gamma ASRV help description.  */
  int laguerre_flag;	/**< @brief Use Laguerre approximation of Gamma - CURRENTLY NOT IMPLIMENTED (default=off).  */
  const char *laguerre_help; /**< @brief Use Laguerre approximation of Gamma - CURRENTLY NOT IMPLIMENTED help description.  */
  int ssrv_flag;	/**< @brief Use a Site-Specific Rate Variation model (SSRV) (default=off).  */
  const char *ssrv_help; /**< @brief Use a Site-Specific Rate Variation model (SSRV) help description.  */
  float nu_arg;	/**< @brief Set Nu for the SSRV model (default='1.0').  */
  char * nu_orig;	/**< @brief Set Nu for the SSRV model original value given at command line.  */
  const char *nu_help; /**< @brief Set Nu for the SSRV model help description.  */
  char * posteriorRates_arg;	/**< @brief File with posterior distribution of the rate for each sequence site - for ASRV.  */
  char * posteriorRates_orig;	/**< @brief File with posterior distribution of the rate for each sequence site - for ASRV original value given at command line.  */
  const char *posteriorRates_help; /**< @brief File with posterior distribution of the rate for each sequence site - for ASRV help description.  */
  const char *day_help; /**< @brief Use 'day' model help description.  */
  const char *jtt_help; /**< @brief Use 'jtt' model (default) help description.  */
  const char *rev_help; /**< @brief Use 'rev' model help description.  */
  const char *wag_help; /**< @brief Use 'wag' model help description.  */
  const char *cprev_help; /**< @brief Use 'cprev' model help description.  */
  const char *nucjc_help; /**< @brief Use nucleic acid JC model help description.  */
  const char *aaJC_help; /**< @brief Use amino acid JC model help description.  */
  const char *k2p_help; /**< @brief Use 'k2p' model help description.  */
  const char *hky_help; /**< @brief Use 'hky' model help description.  */
  const char *tamura92_help; /**< @brief Use 'tamura92' model help description.  */
  const char *gtr_help; /**< @brief Use 'gtr' model (general reversible model) help description.  */
  char * modelfile_arg;	/**< @brief Read replacement matrix from user input file.  */
  char * modelfile_orig;	/**< @brief Read replacement matrix from user input file original value given at command line.  */
  const char *modelfile_help; /**< @brief Read replacement matrix from user input file help description.  */
  int verbose_arg;	/**< @brief Log report level (verbose) (default='1').  */
  char * verbose_orig;	/**< @brief Log report level (verbose) original value given at command line.  */
  const char *verbose_help; /**< @brief Log report level (verbose) help description.  */
  char * Logfile_arg;	/**< @brief Log output file name (default='-').  */
  char * Logfile_orig;	/**< @brief Log output file name original value given at command line.  */
  const char *Logfile_help; /**< @brief Log output file name help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int SEMPHY_given ;	/**< @brief Whether SEMPHY was given.  */
  unsigned int bbl_given ;	/**< @brief Whether bbl was given.  */
  unsigned int likelihood_given ;	/**< @brief Whether likelihood was given.  */
  unsigned int PerPosLike_given ;	/**< @brief Whether PerPosLike was given.  */
  unsigned int PerPosPosterior_given ;	/**< @brief Whether PerPosPosterior was given.  */
  unsigned int rate_given ;	/**< @brief Whether rate was given.  */
  unsigned int max_semphy_iter_given ;	/**< @brief Whether max-semphy-iter was given.  */
  unsigned int epsilonLikelihoodImprovement4iterNJ_given ;	/**< @brief Whether epsilonLikelihoodImprovement4iterNJ was given.  */
  unsigned int epsilonLikelihoodImprovement4pairwiseDistance_given ;	/**< @brief Whether epsilonLikelihoodImprovement4pairwiseDistance was given.  */
  unsigned int epsilonLikelihoodImprovement4alphaOptimiz_given ;	/**< @brief Whether epsilonLikelihoodImprovement4alphaOptimiz was given.  */
  unsigned int epsilonLikelihoodImprovement4BBL_given ;	/**< @brief Whether epsilonLikelihoodImprovement4BBL was given.  */
  unsigned int maxNumOfBBLIter_given ;	/**< @brief Whether maxNumOfBBLIter was given.  */
  unsigned int consurf_given ;	/**< @brief Whether consurf was given.  */
  unsigned int NJ_given ;	/**< @brief Whether NJ was given.  */
  unsigned int homogeneousRatesDTME_given ;	/**< @brief Whether homogeneousRatesDTME was given.  */
  unsigned int pairwiseGammaDTME_given ;	/**< @brief Whether pairwiseGammaDTME was given.  */
  unsigned int commonAlphaDTME_given ;	/**< @brief Whether commonAlphaDTME was given.  */
  unsigned int rate4siteDTME_given ;	/**< @brief Whether rate4siteDTME was given.  */
  unsigned int posteriorDTME_given ;	/**< @brief Whether posteriorDTME was given.  */
  unsigned int BPrepeats_given ;	/**< @brief Whether BPrepeats was given.  */
  unsigned int BPconsensus_given ;	/**< @brief Whether BPconsensus was given.  */
  unsigned int BPonUserTree_given ;	/**< @brief Whether BPonUserTree was given.  */
  unsigned int sequence_given ;	/**< @brief Whether sequence was given.  */
  unsigned int tree_given ;	/**< @brief Whether tree was given.  */
  unsigned int constraint_given ;	/**< @brief Whether constraint was given.  */
  unsigned int outputfile_given ;	/**< @brief Whether outputfile was given.  */
  unsigned int treeoutputfile_given ;	/**< @brief Whether treeoutputfile was given.  */
  unsigned int gaps_given ;	/**< @brief Whether gaps was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int alphabet_given ;	/**< @brief Whether alphabet was given.  */
  unsigned int ratio_given ;	/**< @brief Whether ratio was given.  */
  unsigned int ACGprob_given ;	/**< @brief Whether ACGprob was given.  */
  unsigned int inputRate_given ;	/**< @brief Whether inputRate was given.  */
  unsigned int homogeneous_given ;	/**< @brief Whether homogeneous was given.  */
  unsigned int alpha_given ;	/**< @brief Whether alpha was given.  */
  unsigned int optimizeAlpha_given ;	/**< @brief Whether optimizeAlpha was given.  */
  unsigned int categories_given ;	/**< @brief Whether categories was given.  */
  unsigned int laguerre_given ;	/**< @brief Whether laguerre was given.  */
  unsigned int ssrv_given ;	/**< @brief Whether ssrv was given.  */
  unsigned int nu_given ;	/**< @brief Whether nu was given.  */
  unsigned int posteriorRates_given ;	/**< @brief Whether posteriorRates was given.  */
  unsigned int day_given ;	/**< @brief Whether day was given.  */
  unsigned int jtt_given ;	/**< @brief Whether jtt was given.  */
  unsigned int rev_given ;	/**< @brief Whether rev was given.  */
  unsigned int wag_given ;	/**< @brief Whether wag was given.  */
  unsigned int cprev_given ;	/**< @brief Whether cprev was given.  */
  unsigned int nucjc_given ;	/**< @brief Whether nucjc was given.  */
  unsigned int aaJC_given ;	/**< @brief Whether aaJC was given.  */
  unsigned int k2p_given ;	/**< @brief Whether k2p was given.  */
  unsigned int hky_given ;	/**< @brief Whether hky was given.  */
  unsigned int tamura92_given ;	/**< @brief Whether tamura92 was given.  */
  unsigned int gtr_given ;	/**< @brief Whether gtr was given.  */
  unsigned int modelfile_given ;	/**< @brief Whether modelfile was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int Logfile_given ;	/**< @brief Whether Logfile was given.  */

  int DistanceTableEstimationMethod_group_counter; /**< @brief Counter for group DistanceTableEstimationMethod */
  int Model_group_counter; /**< @brief Counter for group Model */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SEMPHY_CMDLINE_H */
